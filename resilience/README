--------------------------------------------------------------------------------
                              Resilience GREMLINs
                    Author: Ignacio Laguna <ilaguna@llnl.gov>
--------------------------------------------------------------------------------

1. INTRODUCTION

The resilience GREMLINs inject faults into target applications at specified 
rates and distributions, emulating the characteristics and manifestations of 
real-world faults. Our fault injection strategy involves emulating faults from 
multiple components of the system: processor instruction faults, memory errors, 
network errors, and process failures. Our goal is to study the efficiency of 
multiple fault recovery paradigms, such as (1) code-block reexecution, (2) data 
reconstruction (via interpolation or similar techniques), and (3) replication 
in space and time.

2. EVALUATING CODE-BLOCK REEXECUTION

In this (first) release, we emulate hardware faults to evaluate the overhead of 
code-block reexecution as a method for recovery. This release includes a fault 
injector library (in ./src/fault_injector) and code of the LULESH proxy 
application to emulate the recovery mechanisms. 

More about this technique can be found in this short paper:
I. Laguna, M. Schulz, J. Keasler, D. Richards, J. Belak, "Optimal Placement of 
Retry-Based Fault Recovery Annotations in HPC Applications," Research Poster 
Reception, ACM/IEEE Supercomputing conference (SC'13), Nov 2013, Denver, 
Colorado.

3. LULESH CODE

The sample LULESH code (in ./src/lulesh) is supplied as a set of patches to 
LULESH version 1.0.1. The original file is in ./src/lulesh/lulesh.cc, and it 
can be downloaded from: https://codesign.llnl.gov/lulesh.php.

4. BUILDING

To build the code, first configure your compiler options in Makefile.config. 
Then execute:
$ make && make install

5. EXAMPLE

The ./src/lulesh/ directory has the LULESH code with the different recovery 
methods. The 'run_experiment.py' script helps running the examples. Here are 
the options of this script:

	$ ./run_experiment.py 
	Usage: run_experiment.py [options] <program> <injection_lib>

	Options:
  		-h, --help            	show this help message and exit
  		-e RATE, --error-rate=RATE
                        		Set error rate (errors/hour).
  		-i IT, --iter-back=IT
                        		Set number of iterations to recover
  		-t, --print-injection-time
                        		Print next injection time.

We can run an example by specifying the error rate, the LULESH example code, 
and the directory that contains the fault injector library, as follows:

	$ ./run_experiment.py -e 20 ./lulesh_main_only ../../lib/


